
recaman_seq <- c(0, rep(NA, 499))
for (i in 1:length(recaman_seq)) {
    candidate <- recaman_seq[i] - i
    if (candidate > 0 & !(candidate %in% recaman_seq)) {
        recaman_seq[i + 1] <- candidate
    } else recaman_seq[i + 1] <- recaman_seq[i] + i
}

get_recaman <- function(n) {
    recaman_seq <- numeric(n)
    for (i in 1:length(recaman_seq)) {
        candidate <- recaman_seq[i] - i
        if (candidate > 0 & !(candidate %in% recaman_seq)) {
            recaman_seq[i + 1] <- candidate
        } else recaman_seq[i + 1] <- recaman_seq[i] + i
    }
    recaman_seq <- recaman_seq[-length(recaman_seq)]
    recaman_seq
}

get_recaman(7)


construct_arc <- function(start, stop, type) {
    r <- abs(start - stop) / 2
    x0 <- min(c(start, stop)) + r
    y0 <- 0
    if (type == "up_forward") {
        theta <- seq(pi, 0, -0.01)
    } else if (type == "up_backwards") {
        theta <- seq(0, pi, 0.01)
    } else if (type == "down_forward") {
        theta <- seq(pi, 2 * pi, 0.01)
    } else if (type == "down_backwards") {
        theta <- seq(2 * pi, pi, -0.01)
    }
    x <- r * cos(theta) + x0
    y <- r * sin(theta) + y0
    df <- data.frame(x, y)
}


theta <- seq(0, - pi, 0.01)
x <- 1 * cos(theta)
y <- 1 * sin(theta)
plot(x, y, type = "l")
df <- data.frame(x, y)

library(tidyverse)

plot_recaman <- function(n) {
    recaman_seq <- get_recaman(n)
    df <- data.frame(start = recaman_seq,
                     stop = lead(recaman_seq),
                     side = rep_len(c("down", "up"), length(recaman_seq))) %>% 
        mutate(direction = ifelse(stop - start > 0, "forward", "backwards"),
               type = paste(side, direction, sep = "_")) %>% 
        filter(!is.na(stop))
    l <- Map(construct_arc, start = df$start, stop = df$stop, type = df$type)
    df2 <- do.call("rbind", l)
    ggplot(df2, aes(x, y)) +
        geom_path(alpha = 0.7, size = 0.5) +
        coord_fixed() +
        theme_void()
}

plot_recaman(20)
plot_recaman(66) # Coolest

recaman_seq <- get_recaman(50)
df <- data.frame(start = recaman_seq,
                 stop = lead(recaman_seq),
                 side = rep_len(c("down", "up"), length(recaman_seq))) %>% 
    mutate(direction = ifelse(stop - start > 0, "forward", "backwards"),
           type = paste(side, direction, sep = "_")) %>% 
    filter(!is.na(stop))

df

l <- Map(construct_arc, start = df$start, stop = df$stop, type = df$type)
str(l)
y <- do.call("rbind", l)

ggplot(y, aes(x, y)) +
    geom_path(alpha = 0.7) +
    coord_fixed() +
    theme_void()
plot(y$x, y$y, type = "l")

?apply
x <- construct_arc(7, 13, type = "up_forward")
plot(x$x, x$y, type = "l")

construct_arc(side = "up")
arc <- get_arc(x0 = 1, y0 = 1, angle = pi)
plot(arc$x, arc$y, type = "l")

recaman_seq


# Sequence as music -------------------------------------------------------

# We choose the twelve-tone equal temperament scale
reference_frequence <- 440
calc_freq <- function(n) {
    reference <- 440
    kn <- reference * 2^((n - 49) / 12)
    kn
}

freqs <- k_n(1:12)
secs <- 1

construct_note <- function(n, sampling_rate = 8000, bits = 16, secs = 2) {
    f <- calc_freq(n)
    t <- seq(0, secs, 1/sampling_rate)
    y <- sin(2 * pi * f * t)
    s <- floor(2^(bits - 2) * y)
    note <- tuneR::Wave(s, samp.rate = sampling_rate, bit = bits)
    note
}

library(tuneR)
setWavPlayer("audacious")
a <- construct_note(1)
play(a)

calc_freq(12)
a <- sine(calc_freq(12))
play(a)
?Wave
library(dplyr)
library(tuneR)        #import the tuneR library
setWavPlayer("audacious")
f=440                 #frequency of A4 note
sr=8000 
bits=16
secs=2                #length of the note set to 2
amp=1
t=seq(0, secs, 1/sr)
y= amp*sin(2*pi*f*t)  #make a sinewave with above attributes
s=floor(2^(bits-2)*y) #floor it to make it an integer value
u=Wave(s, samp.rate=sr, bit=bits)  #make a wave structure 
play(u)
